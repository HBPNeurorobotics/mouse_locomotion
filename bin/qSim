#!/usr/bin/python2

##
# Mouse Locomotion Simulation
#
# Human Brain Project SP10
# 
# This project provides the user with a framework based on Blender allowing:
#  - Edition of a 3D model
#  - Edition of a physical controller model (torque-based or muscle-based)
#  - Edition of a brain controller model (oscillator-based or neural network-based)
#  - Simulation of the model
#  - Optimization of the parameters in distributed cloud simulations
# 
# File created by: Gabriel Urbain <gabriel.urbain@ugent.be>. February 2016
# Modified by: Dimitri Rodarie
##


# Add src folder to path
import logging.config
import os
from os.path import dirname, realpath
import sys
from plumbum import cli
from simulation import SimService, Blender, Registry, Process

root = dirname(dirname(realpath(__file__))).replace("\\", "/")
src = root + "/src"
sys.path.append(src)


class SimCli(cli.Application):
    """This script provide a framework for quadruped locomotion driven by reservoir computing"""

    # Default CLI application options
    DEF_OPT = {"blender_path": "Blender2.77/", "blender_model": "dog_vert.blend", "root_dir": root,
               "config_name": "DogVertDefConfig", "sim_type": "RUN", "registry": False, "service": False,
               "local": False, "logfile": os.path.expanduser("~").replace("\\", "/") + "/.log/qSim.log",
               "fullscreen": False,
               "save": False}
    opt = dict()

    # Simulation parameters
    path = cli.SwitchAttr(["-p", "--binpath"], str, default=DEF_OPT["blender_path"],
                          help="Path of Blender binaries")
    model = cli.SwitchAttr(["-m", "--model"], str, default=DEF_OPT["blender_model"],
                           help="Model to simulation")
    config = cli.SwitchAttr(["-c", "--config"], str, default=DEF_OPT["config_name"],
                            help="The config class to be used for simulation")
    sim_type = cli.SwitchAttr(["-t", "--type"], str, default=DEF_OPT["sim_type"],
                              help="Specify the type of simulation: RUN, BRAIN or MUSCLE")

    # Server modes
    registry = cli.Flag(["-r"], default=DEF_OPT["registry"],
                        help="Start registry server; no simulation will be run")
    service = cli.Flag(["-s"], default=DEF_OPT["service"],
                       help="Start services server; no simulation will be run")
    local = cli.Flag(["-l"], default=DEF_OPT["local"],
                     help="Start a single local simulation. Used to bypass simulation distributed architecture")

    # Display modes
    root = cli.Flag(["--root"], default=DEF_OPT["root_dir"],
                    help="Force the root directory of the mouse locomotion software")
    verbose = cli.Flag(["-v", "--verbosemode"], default=False,
                       help="Set verbose mode")
    logfile = cli.SwitchAttr(["--logfile"], str, default=DEF_OPT["logfile"],
                             help="The log file to use")
    fullscreen = cli.Flag(["-f", "--fullscreen"], default=DEF_OPT["fullscreen"],
                          help="Enable fullscreen mode")

    def main(self):

        self.opt["blender_path"] = self.root + "/bin/" + self.path
        self.opt["blender_model"] = self.root + "/mdl/" + self.model
        self.opt["root_dir"] = self.root
        self.opt["save_path"] = self.root + "/save/default.qsm"
        self.opt["config_name"] = self.config
        self.opt["sim_type"] = self.sim_type
        self.opt["registry"] = self.registry
        self.opt["service"] = self.service
        self.opt["local"] = self.local
        self.opt["verbose"] = self.verbose
        self.opt["logfile"] = self.logfile
        self.opt["fullscreen"] = self.fullscreen

        # Configure logging
        log_file = self.opt["logfile"]
        if not os.path.exists(os.path.dirname(log_file)):
            os.makedirs(os.path.dirname(log_file))
        if not os.path.exists(log_file):
            f = open(log_file, 'w')
            f.close()
        if self.verbose:
            logging.config.fileConfig(root + "/etc/logging.conf",
                                      defaults={'logfilename': log_file,
                                                'simLevel': "DEBUG"})
        else:
            logging.config.fileConfig(root + "/etc/logging.conf",
                                      defaults={'logfilename': log_file,
                                                'simLevel': "INFO"})

        # Start a local simulation
        if self.opt["local"]:
            s = Blender(self.opt, "BLENDERPLAYER")
        elif self.opt["registry"]:
            s = Registry(self.opt)
        elif self.opt["service"]:
            s = SimService(self.opt)
        # Else, start chosen simulation
        else:
            s = Process(self.opt)
        s.start()


if __name__ == "__main__":
    SimCli.run()
